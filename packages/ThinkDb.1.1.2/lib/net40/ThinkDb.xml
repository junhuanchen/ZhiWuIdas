<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ThinkDb</name>
    </assembly>
    <members>
        <member name="T:ThinkDb.CurrentDatabaseContext">
            <summary>
            <see cref="T:ThinkDb.ICurrentDatabaseContext"/> 的抽象实现
            </summary>
        </member>
        <member name="T:ThinkDb.ICurrentDatabaseContext">
            <summary>
            当前数据访问的上下文接口
            </summary>
        </member>
        <member name="M:ThinkDb.ICurrentDatabaseContext.CurrentDatabase">
            <summary>
            数据访问的上下文
            </summary>
        </member>
        <member name="F:ThinkDb.CurrentDatabaseContext._databaseFactory">
            <summary>
            database factory
            </summary>
        </member>
        <member name="M:ThinkDb.CurrentDatabaseContext.#ctor(ThinkDb.IDatabaseFactory)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkDb.CurrentDatabaseContext.GetMap">
            <summary>
            Get the dicitonary mapping database factory to its current database.
            </summary>
        </member>
        <member name="M:ThinkDb.CurrentDatabaseContext.SetMap(System.Collections.Generic.IDictionary{System.Guid,ThinkDb.IDatabase})">
            <summary>
            Set the map mapping database factory to its current database.
            </summary>
        </member>
        <member name="M:ThinkDb.CurrentDatabaseContext.CurrentDatabase">
            <summary>
            current database
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkDb.CurrentDatabaseContext.Bind(ThinkDb.IDatabase)">
            <summary>
            Binds the specified session to the current context.
            </summary>
        </member>
        <member name="M:ThinkDb.CurrentDatabaseContext.HasBind(ThinkDb.IDatabaseFactory)">
            <summary>
            Returns whether there is a session bound to the current context.
            </summary>
        </member>
        <member name="M:ThinkDb.CurrentDatabaseContext.Unbind(ThinkDb.IDatabaseFactory)">
            <summary>
            Unbinds and returns the current session.
            </summary>
        </member>
        <member name="P:ThinkDb.CurrentDatabaseContext.Database">
            <summary>
            Gets or sets the currently bound database.
            </summary>
        </member>
        <member name="T:ThinkDb.Database">
            <summary>
            数据访问基类
            </summary>
        </member>
        <member name="T:ThinkDb.IDatabase">
            <summary>
            数据接口
            </summary>
        </member>
        <member name="M:ThinkDb.IDatabase.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            执行当前数据库连接对象的命令,指定参数.
            </summary>
            <remarks>
            示例: int result = ExecuteNonQuery(CommandType.StoredProcedure, "PublishOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本,其它.)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">分配给命令的DbParamter参数数组(无参数请写(DbParameter[])null)</param>
            <returns>返回命令影响的行数</returns>
        </member>
        <member name="M:ThinkDb.IDatabase.ExecuteReader(System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            执行当前数据库连接对象的数据阅读器,指定参数.
            </summary>
            <remarks>
            示例: IDataReader dr = ExecuteReader(CommandType.StoredProcedure, "GetOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或SQL语句</param>
            <param name="commandParameters">分配给命令的DbParamter参数数组(无参数请写(DbParameter[])null)</param>
            <returns>返回包含结果集的IDataReader</returns>
        </member>
        <member name="M:ThinkDb.IDatabase.ExecuteScalar(System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            执行指定数据库连接对象的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例: int orderCount = (int)ExecuteScalar(CommandType.StoredProcedure, "GetOrderCount", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">分配给命令的DbParamter参数数组(无参数请写(DbParameter[])null)</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:ThinkDb.IDatabase.ExecuteDataset(System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            执行指定数据库连接字符串的命令,指定参数值.返回DataSet.
            </summary>
            <remarks>
            示例: DataSet ds = ExecuteDataset(CommandType.StoredProcedure, "GetOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">分配给命令的DbParamter参数数组(无参数请写(DbParameter[])null)</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:ThinkDb.IDatabase.CreateInParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            Command对象的传入参数
            </summary>
            <param name="paramName">参数名称</param>
            <param name="dbType">数据类型</param>
            <param name="size">数据长度</param>
            <param name="value">值</param>
        </member>
        <member name="M:ThinkDb.IDatabase.CreateInParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            Command对象的传入参数
            </summary>
            <param name="paramName">参数名称</param>
            <param name="dbType">数据类型</param>
            <param name="value">值</param>
        </member>
        <member name="M:ThinkDb.IDatabase.CreateOutParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            Command对象的传出参数
            </summary>
            <param name="paramName">参数名称</param>
            <param name="dbType">数据类型</param>
            <param name="size">数据长度</param>
        </member>
        <member name="M:ThinkDb.IDatabase.CreateOutParameter(System.String,System.Data.DbType)">
            <summary>
            Command对象的传出参数
            </summary>
            <param name="paramName">参数名称</param>
            <param name="dbType">数据类型</param>
        </member>
        <member name="M:ThinkDb.IDatabase.Reconnect">
            <summary>
            重新连接数据库
            </summary>
        </member>
        <member name="M:ThinkDb.IDatabase.Disconnect">
            <summary>
            断开数据库连接
            </summary>
        </member>
        <member name="M:ThinkDb.IDatabase.BeginTransaction">
            <summary>
            开始事务
            </summary>
        </member>
        <member name="M:ThinkDb.IDatabase.CreateSqlCommand">
            <summary>
            创建数据库命令
            </summary>
        </member>
        <member name="M:ThinkDb.IDatabase.CreateSqlQuery">
            <summary>
            创建数据查询
            </summary>
        </member>
        <member name="M:ThinkDb.IDatabase.Get``1(System.Object[])">
            <summary>
            获取实体
            </summary>
        </member>
        <member name="M:ThinkDb.IDatabase.Save``1(``0)">
            <summary>
            保存实体
            </summary>
        </member>
        <member name="M:ThinkDb.IDatabase.Update``1(``0)">
            <summary>
            更新实体
            </summary>
        </member>
        <member name="M:ThinkDb.IDatabase.Delete``1(``0)">
            <summary>
            删除实体
            </summary>
        </member>
        <member name="P:ThinkDb.IDatabase.Connection">
            <summary>
            当前的数据库连接
            </summary>
        </member>
        <member name="P:ThinkDb.IDatabase.Transaction">
            <summary>
            当前执行的事务
            </summary>
        </member>
        <member name="E:ThinkDb.IDatabase.DataExecuting">
            <summary>
            在数据执行操作前发生
            </summary>
        </member>
        <member name="E:ThinkDb.IDatabase.DataValidated">
            <summary>
            保存数据之前验证
            </summary>
        </member>
        <member name="E:ThinkDb.IDatabase.DataExecuted">
            <summary>
            在数据执行操作后发生
            </summary>
        </member>
        <member name="P:ThinkDb.IDatabase.DatabaseFactory">
            <summary>
            对应的工厂
            </summary>
        </member>
        <member name="M:ThinkDb.Database.CreateConnection(System.Data.Common.DbProviderFactory,System.String)">
            <summary>
            为当前对象创建一个数据连接
            </summary>
        </member>
        <member name="M:ThinkDb.Database.CreateCommandByCommandType(System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            创建一个DbCommand
            </summary>
        </member>
        <member name="M:ThinkDb.Database.#ctor(System.Data.Common.DbProviderFactory,System.String)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkDb.Database.#ctor(System.Data.Common.DbProviderFactory,System.String,ThinkDb.IDatabaseFactory)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkDb.Database.#ctor(System.Data.IDbConnection)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkDb.Database.#ctor(System.Data.IDbConnection,ThinkDb.IDatabaseFactory)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkDb.Database.DeriveParameters(System.Data.Common.DbCommand)">
            <summary>
            检索SQL参数信息并填充
            </summary>
        </member>
        <member name="M:ThinkDb.Database.GetIdentitySql">
            <summary>
            获取主键id的T-SQL
            </summary>
        </member>
        <member name="M:ThinkDb.Database.GetTableColumns(System.String)">
            <summary>
            获取表字典信息
            </summary>
            <param name="tableName">表名</param>
            <returns>模型字段集合</returns>
        </member>
        <member name="M:ThinkDb.Database.Reconnect">
            <summary>
            尝试重新连接数据库
            </summary>
        </member>
        <member name="M:ThinkDb.Database.Disconnect">
            <summary>
            断开数据库连接
            </summary>
        </member>
        <member name="M:ThinkDb.Database.BeginTransaction">
            <summary>
            开始事务
            </summary>
        </member>
        <member name="M:ThinkDb.Database.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            执行当前数据库连接对象的命令,指定参数.
            </summary>
            <remarks>
            示例: int result = ExecuteNonQuery(CommandType.StoredProcedure, "PublishOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">分配给命令的DbParamter参数数组(无参数请写(DbParameter[])null)</param>
            <returns>返回命令影响的行数</returns>
        </member>
        <member name="M:ThinkDb.Database.ExecuteReader(System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            执行当前数据库连接对象的数据阅读器,指定参数.
            </summary>
            <remarks>
            示例: IDataReader dr = ExecuteReader(CommandType.StoredProcedure, "GetOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或SQL语句</param>
            <param name="commandParameters">分配给命令的DbParamter参数数组(无参数请写(DbParameter[])null)</param>
            <returns>返回包含结果集的IDataReader</returns>
        </member>
        <member name="M:ThinkDb.Database.ExecuteScalar(System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            执行指定数据库连接对象的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例: int orderCount = (int)ExecuteScalar(CommandType.StoredProcedure, "GetOrderCount", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">分配给命令的DbParamter参数数组(无参数请写(DbParameter[])null)</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:ThinkDb.Database.ExecuteDataset(System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            执行指定数据库连接字符串的命令,指定参数值.返回DataSet.
            </summary>
            <remarks>
            示例: DataSet ds = ExecuteDataset(CommandType.StoredProcedure, "GetOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">分配给命令的DbParamter参数数组(无参数请写(DbParameter[])null)</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:ThinkDb.Database.CreateInParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            Command对象的传入参数
            </summary>
            <param name="paramName">参数名称</param>
            <param name="dbType">数据类型</param>
            <param name="size">数据长度</param>
            <param name="value">值</param>
        </member>
        <member name="M:ThinkDb.Database.CreateInParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            Command对象的传入参数
            </summary>
            <param name="paramName">参数名称</param>
            <param name="dbType">数据类型</param>
            <param name="value">值</param>
        </member>
        <member name="M:ThinkDb.Database.CreateOutParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            Command对象的传出参数
            </summary>
            <param name="paramName">参数名称</param>
            <param name="dbType">数据类型</param>
            <param name="size">数据长度</param>
        </member>
        <member name="M:ThinkDb.Database.CreateOutParameter(System.String,System.Data.DbType)">
            <summary>
            Command对象的传出参数
            </summary>
            <param name="paramName">参数名称</param>
            <param name="dbType">数据类型</param>
        </member>
        <member name="M:ThinkDb.Database.CreateParameter(System.String,System.Data.DbType,System.Data.ParameterDirection,System.Int32,System.Object)">
            <summary>
            创建Commond用的DbParameter参数
            </summary>
            <param name="paramName">参数名称</param>
            <param name="dbType">参数对应的数据类型枚举</param>
            <param name="direction">参数类型</param>
            <param name="size">大小</param>
            <param name="value">值</param>
        </member>
        <member name="M:ThinkDb.Database.BuildParameterName(System.String)">
            <summary>
            Builds a value parameter name for the current database.
            </summary>
            <param name="name">The name of the parameter.</param>
            <returns>A correctly formated parameter name.</returns>
        </member>
        <member name="M:ThinkDb.Database.Dispose(System.Boolean)">
            <summary>
            释放数据库连接
            </summary>
        </member>
        <member name="M:ThinkDb.Database.PagingSupport(System.Int32,System.Int32)">
            <summary>
            提供分页支持的T-SQL
            </summary>
            <param name="pageIndex">页索引</param>
            <param name="pageSize">每页显示记录条数</param>
        </member>
        <member name="M:ThinkDb.Database.BuildLikeParameterName(System.String)">
            <summary>
            构造模糊查询参数名称
            </summary>
        </member>
        <member name="M:ThinkDb.Database.OnDataValidated(ThinkDb.DbDataValidationEventArgs)">
            <summary>
            引发 <see cref="E:ThinkDb.Database.DataValidated"/> 事件
            </summary>
        </member>
        <member name="M:ThinkDb.Database.OnDataExecuted(ThinkDb.DbDataExecuteEventArgs)">
            <summary>
            引发 <see cref="E:ThinkDb.Database.DataExecuted"/> 事件
            </summary>
        </member>
        <member name="M:ThinkDb.Database.OnDataExecuting(ThinkDb.DbDataExecuteEventArgs)">
            <summary>
            引发 <see cref="E:ThinkDb.Database.DataExecuting"/> 事件
            </summary>
        </member>
        <member name="M:ThinkDb.Database.Get``1(System.Object[])">
            <summary>
            获取实体
            </summary>
        </member>
        <member name="M:ThinkDb.Database.Save``1(``0)">
            <summary>
            保存实体
            </summary>
        </member>
        <member name="M:ThinkDb.Database.Update``1(``0)">
            <summary>
            更新实体
            </summary>
        </member>
        <member name="M:ThinkDb.Database.Delete``1(``0)">
            <summary>
            删除实体
            </summary>
        </member>
        <member name="M:ThinkDb.Database.CreateSqlCommand">
            <summary>
            创建数据命令
            </summary>
        </member>
        <member name="M:ThinkDb.Database.CreateSqlQuery">
            <summary>
            创建数据查询
            </summary>
        </member>
        <member name="P:ThinkDb.Database.Connection">
            <summary>
            当前的数据源连接
            </summary>
        </member>
        <member name="P:ThinkDb.Database.Transaction">
            <summary>
            当前的数据源事务
            </summary>
        </member>
        <member name="E:ThinkDb.Database.DataValidated">
            <summary>
            定义数据持久化前的验证事件
            </summary>
        </member>
        <member name="E:ThinkDb.Database.DataExecuted">
            <summary>
            在数据执行操作后发生
            </summary>
        </member>
        <member name="E:ThinkDb.Database.DataExecuting">
            <summary>
            在数据执行操作前发生
            </summary>
        </member>
        <member name="T:ThinkDb.DatabaseException">
            <summary>
            数据访问异常 
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseException.#ctor">
            <summary>Default constructor.
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseException.#ctor(System.String)">
            <summary>Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseException.#ctor(System.String,System.Exception)">
            <summary>Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseException.#ctor(System.String,System.Object[])">
            <summary>Parameterized constructor.
            </summary>
        </member>
        <member name="T:ThinkDb.DatabaseFactoryManager">
            <summary>
            工厂管理
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseFactoryManager.Get">
            <summary>
            获取配置节点的默认工厂(即位于配置节点第一个)
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkDb.DatabaseFactoryManager.Get(System.String)">
            <summary>
            根据配置节点名称获取工厂
            </summary>
            <param name="factoryName"></param>
            <returns></returns>
        </member>
        <member name="P:ThinkDb.DatabaseFactoryManager.Instance">
            <summary>
            single instance
            </summary>
        </member>
        <member name="T:ThinkDb.DatabaseSectionHandler">
            <summary>
            database factory配置节
            </summary>
        </member>
        <member name="F:ThinkDb.DatabaseSectionHandler.SectionName">
            <summary>
            配置节点名称
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            创建工厂信息
            </summary>
        </member>
        <member name="T:ThinkDb.DbAggrefunc">
            <summary>
            合计函数枚举
            </summary>
        </member>
        <member name="F:ThinkDb.DbAggrefunc.COUNT">
            <summary>
            求总记录数
            </summary>
        </member>
        <member name="F:ThinkDb.DbAggrefunc.AVG">
            <summary>
            求平均值
            </summary>
        </member>
        <member name="F:ThinkDb.DbAggrefunc.SUM">
            <summary>
            求总和
            </summary>
        </member>
        <member name="F:ThinkDb.DbAggrefunc.MAX">
            <summary>
            求最大值
            </summary>
        </member>
        <member name="F:ThinkDb.DbAggrefunc.MIN">
            <summary>
            求最小值
            </summary>
        </member>
        <member name="F:ThinkDb.DbAggrefunc.NONE">
            <summary>
            无效值
            </summary>
        </member>
        <member name="T:ThinkDb.DbColumn">
            <summary>
            表示数据表中列的架构
            </summary>
        </member>
        <member name="P:ThinkDb.DbColumn.ColumnName">
            <summary>
            获取或设置字段名称
            </summary>
        </member>
        <member name="P:ThinkDb.DbColumn.DataType">
            <summary>
            获取或设置字段的数据类型。
            </summary>
        </member>
        <member name="P:ThinkDb.DbColumn.AllowDBNull">
            <summary>
            获取或设置一个值，指示字段是否允许空值。
            </summary>
        </member>
        <member name="P:ThinkDb.DbColumn.AutoIncrement">
            <summary>
            获取或设置一个值，指示字段是否为自动增量
            </summary>
        </member>
        <member name="P:ThinkDb.DbColumn.Primary">
            <summary>
            获取或设置一个值，指示字段是否为主键
            </summary>
        </member>
        <member name="T:ThinkDb.DbJoinWay">
            <summary>
            表链接方式
            </summary>
        </member>
        <member name="F:ThinkDb.DbJoinWay.INNER">
            <summary>
            标准链接
            </summary>
        </member>
        <member name="F:ThinkDb.DbJoinWay.LEFT">
            <summary>
            左连接
            </summary>
        </member>
        <member name="F:ThinkDb.DbJoinWay.RIGHT">
            <summary>
            右连接
            </summary>
        </member>
        <member name="T:ThinkDb.DbJudgeSymbol">
            <summary>
            查询等式枚举
            </summary>
        </member>
        <member name="F:ThinkDb.DbJudgeSymbol.EQ">
            <summary>
            等于(=)
            </summary>
        </member>
        <member name="F:ThinkDb.DbJudgeSymbol.GT">
            <summary>
            大于(>)
            </summary>
        </member>
        <member name="F:ThinkDb.DbJudgeSymbol.EGT">
            <summary>
            大于等于(>=)
            </summary>
        </member>
        <member name="F:ThinkDb.DbJudgeSymbol.LT">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:ThinkDb.DbJudgeSymbol.ELT">
            <summary>
            小于等于
            </summary>
        </member>
        <member name="F:ThinkDb.DbJudgeSymbol.NEQ">
            <summary>
            不等于(!=)
            </summary>
        </member>
        <member name="F:ThinkDb.DbJudgeSymbol.IN">
            <summary>
            子查询
            </summary>
        </member>
        <member name="F:ThinkDb.DbJudgeSymbol.NIN">
            <summary>
            NOT IN
            </summary>
        </member>
        <member name="F:ThinkDb.DbJudgeSymbol.LIKE">
            <summary>
            LIKE
            </summary>
        </member>
        <member name="F:ThinkDb.DbJudgeSymbol.NLIKE">
            <summary>
            NOT LIKE
            </summary>
        </member>
        <member name="F:ThinkDb.DbJudgeSymbol.IS">
            <summary>
            IS
            </summary>
        </member>
        <member name="F:ThinkDb.DbJudgeSymbol.ISNOT">
            <summary>
            IS NOT
            </summary>
        </member>
        <member name="T:ThinkDb.DbOrderType">
            <summary>
            排序类型
            </summary>
        </member>
        <member name="F:ThinkDb.DbOrderType.DESC">
            <summary>
            降序
            </summary>
        </member>
        <member name="F:ThinkDb.DbOrderType.ASC">
            <summary>
            升序
            </summary>
        </member>
        <member name="T:ThinkDb.DatabaseExtentions">
            <summary>
            <see cref="T:ThinkDb.IDatabase"/> 的扩展方法
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.Data(ThinkDb.ISqlCommand,System.Collections.IDictionary)">
            <summary>
            设置添加/修改数据
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.Where(ThinkDb.ISqlCommand,System.String,System.Object)">
            <summary>
            设置查询条件
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.Where(ThinkDb.ISqlCommand,System.String,ThinkDb.DbJudgeSymbol,System.Object)">
            <summary>
            设置查询条件
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.Where(ThinkDb.ISqlCommand,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            设置查询条件
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.Where(ThinkDb.ISqlCommand,System.Collections.Generic.IEnumerable{ThinkDb.SqlWhere})">
            <summary>
            设置查询条件
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.SetField(ThinkDb.ISqlCommand,System.String,System.Object)">
            <summary>
            设置字段更新
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.SetIncrement(ThinkDb.ISqlCommand,System.String,System.Int32)">
            <summary>
            统计字段更新(+)
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.SetDecrement(ThinkDb.ISqlCommand,System.String,System.Int32)">
            <summary>
            统计字段更新(-)
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.GetField``1(ThinkDb.ISqlQuery,System.String)">
            <summary>
            获取单个字段的值
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.Count(ThinkDb.ISqlQuery)">
            <summary>
            求总个数
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.Avg``1(ThinkDb.ISqlQuery,System.String)">
            <summary>
            求平均值
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.Sum``1(ThinkDb.ISqlQuery,System.String)">
            <summary>
            求汇总值
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.Max``1(ThinkDb.ISqlQuery,System.String)">
            <summary>
            求最大值
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.Min``1(ThinkDb.ISqlQuery,System.String)">
            <summary>
            求最小值
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.Exist(ThinkDb.ISqlQuery)">
            <summary>
            是否存在符合条件的记录
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.Join(ThinkDb.ISqlQuery,ThinkDb.DbJoinWay,System.String,System.Action{ThinkDb.SqlJoin})">
            <summary>
            连接单表
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.Join(ThinkDb.ISqlQuery,ThinkDb.DbJoinWay,System.String,System.String,System.Action{ThinkDb.SqlJoin})">
            <summary>
            连接单表
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.Join(ThinkDb.ISqlQuery,System.String,System.Action{ThinkDb.SqlJoin})">
            <summary>
            连接单表
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.Join(ThinkDb.ISqlQuery,System.String,System.String,System.Action{ThinkDb.SqlJoin})">
            <summary>
            连接单表
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.Field(ThinkDb.ISqlQuery,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            设置查询字段
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.Field(ThinkDb.ISqlQuery,System.String[])">
            <summary>
            设置显示字段
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.Field(ThinkDb.ISqlQuery,System.Collections.Generic.IEnumerable{ThinkDb.SqlField})">
            <summary>
            设置显示字段
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.Where(ThinkDb.ISqlQuery,System.String,System.Object)">
            <summary>
            设置查询条件
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.Where(ThinkDb.ISqlQuery,System.String,ThinkDb.DbJudgeSymbol,System.Object)">
            <summary>
            设置查询条件
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.Where(ThinkDb.ISqlQuery,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            设置查询条件
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.Where(ThinkDb.ISqlQuery,System.Collections.Generic.IEnumerable{ThinkDb.SqlWhere})">
            <summary>
            设置查询条件
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.Having(ThinkDb.ISqlQuery,ThinkDb.DbAggrefunc,System.String,System.Object)">
            <summary>
            设置合计函数过滤条件
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.Having(ThinkDb.ISqlQuery,ThinkDb.DbAggrefunc,System.String,ThinkDb.DbJudgeSymbol,System.Object)">
            <summary>
            设置合计函数过滤条件
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.Having(ThinkDb.ISqlQuery,System.Collections.Generic.IEnumerable{ThinkDb.SqlHaving})">
            <summary>
            设置合计函数过滤条件
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.OrderBy(ThinkDb.ISqlQuery,System.String,ThinkDb.DbOrderType)">
            <summary>
            排序
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.OrderBy(ThinkDb.ISqlQuery,System.Collections.Generic.IEnumerable{ThinkDb.SqlOrder})">
            <summary>
            排序
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.Limit(ThinkDb.ISqlQuery,System.Int32)">
            <summary>
            显示TopN条数据
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.Find``1(ThinkDb.ISqlQuery)">
            <summary>
            查询结果
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.FindAll``1(ThinkDb.ISqlQuery)">
            <summary>
            查询结果集
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.FindAll``1(ThinkDb.ISqlQuery,System.Object[])">
            <summary>
            查询结果集
            </summary>
        </member>
        <member name="M:ThinkDb.DatabaseExtentions.FindAll``1(ThinkDb.ISqlQuery,System.Int32@)">
            <summary>
            查询结果集
            </summary>
        </member>
        <member name="T:System.Data.DataReaderExtentions">
            <summary>
            对 <see cref="T:System.Data.IDataReader"/> 的扩展
            </summary>
        </member>
        <member name="M:System.Data.DataReaderExtentions.ToDictionary(System.Data.IDataReader)">
            <summary>
            转成字典数据
            </summary>
        </member>
        <member name="M:System.Data.DataReaderExtentions.ToDictionary(System.Data.IDataReader,System.Boolean)">
            <summary>
            转成字典数据
            </summary>
        </member>
        <member name="M:System.Data.DataReaderExtentions.ToList(System.Data.IDataReader)">
            <summary>
            转成字典数据集合
            </summary>
        </member>
        <member name="M:System.Data.DataReaderExtentions.ToList(System.Data.IDataReader,System.Boolean)">
            <summary>
            转成字典数据集合
            </summary>
        </member>
        <member name="M:System.Data.DataReaderExtentions.ToList``1(System.Data.IDataReader)">
            <summary>
            转成实体集合
            </summary>
        </member>
        <member name="M:System.Data.DataReaderExtentions.ToList``1(System.Data.IDataReader,System.Boolean)">
            <summary>
            转成实体集合
            </summary>
        </member>
        <member name="T:ThinkDb.DbDataAction">
            <summary>
            执行数据后的动作
            </summary>
        </member>
        <member name="F:ThinkDb.DbDataAction.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="F:ThinkDb.DbDataAction.Save">
            <summary>
            新增保存
            </summary>
        </member>
        <member name="F:ThinkDb.DbDataAction.Update">
            <summary>
            更新
            </summary>
        </member>
        <member name="T:ThinkDb.DbDataExecuteEventArgs">
            <summary>
            执行数据的事件类
            </summary>
        </member>
        <member name="M:ThinkDb.DbDataExecuteEventArgs.#ctor(ThinkDb.IDatabase,ThinkDb.DbDataAction)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:ThinkDb.DbDataExecuteEventArgs.Action">
            <summary>
            执行数据的动作
            </summary>
        </member>
        <member name="P:ThinkDb.DbDataExecuteEventArgs.Database">
            <summary>
            db
            </summary>
        </member>
        <member name="T:ThinkDb.DbDataExecuteEventHandler">
            <summary>
            执行数据的委托
            </summary>
            <param name="sender">发送对象</param>
            <param name="e"></param>
        </member>
        <member name="T:ThinkDb.DbDataValidationEventArgs">
            <summary>
            执行数据验证的事件类
            </summary>
        </member>
        <member name="M:ThinkDb.DbDataValidationEventArgs.#ctor(ThinkDb.IDatabase,ThinkDb.DbDataAction)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:ThinkDb.DbDataValidationEventArgs.Data">
            <summary>
            提交的数据
            </summary>
        </member>
        <member name="T:ThinkDb.DbDataValidationEventHandler">
            <summary>
            执行数据验证的委托
            </summary>
        </member>
        <member name="T:ThinkDb.IDatabaseFactory">
            <summary>
            工厂接口
            </summary>
        </member>
        <member name="M:ThinkDb.IDatabaseFactory.GetCurrentDatabase">
            <summary>
            当前上下文的数据操作
            </summary>
        </member>
        <member name="M:ThinkDb.IDatabaseFactory.CreateDatabase">
            <summary>
            打开一个数据操作
            </summary>
        </member>
        <member name="M:ThinkDb.IDatabaseFactory.CreateDatabase(System.Data.IDbConnection)">
            <summary>
            打开一个数据操作
            </summary>
        </member>
        <member name="P:ThinkDb.IDatabaseFactory.ID">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="T:ThinkDb.SqlServerDatabase">
            <summary>
            MS-SQL
            </summary>
        </member>
        <member name="M:ThinkDb.SqlServerDatabase.#ctor(System.String)">
            <summary>
            通过有效的数据连接字符串构造实例
            </summary>
            <param name="nameOrConnectionString">数据连接</param>
        </member>
        <member name="M:ThinkDb.SqlServerDatabase.#ctor(System.Data.IDbConnection)">
            <summary>
            通过有效的数据源连接构造实例
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:ThinkDb.SqlServerDatabase.DeriveParameters(System.Data.Common.DbCommand)">
            <summary>
            从在 <see cref="T:ThinkDb.SqlCommand"/> 中指定的存储过程中检索参数信息并填充指定的 <see cref="T:ThinkDb.SqlCommand"/> 对象的参数集合
            </summary>
        </member>
        <member name="M:ThinkDb.SqlServerDatabase.BuildParameterName(System.String)">
            <summary>
            创建命令参数名称
            </summary>
        </member>
        <member name="M:ThinkDb.SqlServerDatabase.GetIdentitySql">
            <summary>
            获取自动增量的Sql
            </summary>
        </member>
        <member name="M:ThinkDb.SqlServerDatabase.GetTableColumns(System.String)">
            <summary>
            获取数据库表的字段信息
            </summary>
            <param name="tableName">表名称</param>
            <returns></returns>
        </member>
        <member name="M:ThinkDb.SqlServerDatabase.CreateParameter(System.String,System.Data.DbType,System.Data.ParameterDirection,System.Int32,System.Object)">
            <summary>
            创建Command参数
            </summary>
        </member>
        <member name="M:ThinkDb.SqlServerDatabase.ExecuteDataset(System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            执行命令并返回DataSet
            </summary>
        </member>
        <member name="M:ThinkDb.SqlServerDatabase.BuildLikeParameterName(System.String)">
            <summary>
            创建模糊查询参数名称
            </summary>
        </member>
        <member name="M:ThinkDb.SqlServerDatabase.PagingSupport(System.Int32,System.Int32)">
            <summary>
            分页T-SQL(最低要求SQL2005)
            </summary>
        </member>
        <member name="M:ThinkDb.SqlServerDatabase.CreateInParameter(System.String,System.Data.SqlDbType,System.Int32,System.Object)">
            <summary>
            Command对象的传入参数
            </summary>
            <param name="paramName">参数名称</param>
            <param name="dbType">数据类型</param>
            <param name="size">数据长度</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:ThinkDb.SqlServerDatabase.CreateInParameter(System.String,System.Data.SqlDbType,System.Object)">
            <summary>
            Command对象的传入参数
            </summary>
            <param name="paramName">参数名称</param>
            <param name="dbType">数据类型</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:ThinkDb.SqlServerDatabase.CreateOutParameter(System.String,System.Data.SqlDbType,System.Int32)">
            <summary>
            Command对象的传出参数
            </summary>
            <param name="paramName">参数名称</param>
            <param name="dbType">数据类型</param>
            <param name="size">数据长度</param>
            <returns></returns>
        </member>
        <member name="M:ThinkDb.SqlServerDatabase.CreateOutParameter(System.String,System.Data.SqlDbType)">
            <summary>
            Command对象的传出参数
            </summary>
            <param name="paramName">参数名称</param>
            <param name="dbType">数据类型</param>
            <returns></returns>
        </member>
        <member name="M:ThinkDb.SqlServerDatabase.CreateSqlParameter(System.String,System.Data.SqlDbType,System.Data.ParameterDirection,System.Int32,System.Object)">
            <summary>
            创建Commond用的DbParameter参数
            </summary>
            <param name="paramName">参数名称</param>
            <param name="dbType">参数对应的数据类型枚举</param>
            <param name="direction">参数类型</param>
            <param name="size">大小</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="T:ThinkDb.EntityPropertiesCache">
            <summary>
            实体类属性缓存
            </summary>
        </member>
        <member name="M:ThinkDb.EntityPropertiesCache.GetProperties(System.Type)">
            <summary>
            获取该类型下所有属性
            </summary>
        </member>
        <member name="M:ThinkDb.EntityPropertiesCache.FindProperty(System.Type,System.String)">
            <summary>
            查找该类型下的属性
            </summary>
        </member>
        <member name="P:ThinkDb.EntityPropertiesCache.Instance">
            <summary>
            single instance
            </summary>
        </member>
        <member name="T:ThinkDb.Restrictions">
            <summary>
            实现各种查询条件的类
            </summary>
        </member>
        <member name="T:ThinkDb.ISqlCommand">
            <summary>
            表示数据命令的接口
            </summary>
        </member>
        <member name="M:ThinkDb.ISqlCommand.Table(System.String)">
            <summary>
            设置表名称
            </summary>
        </member>
        <member name="M:ThinkDb.ISqlCommand.Data(ThinkDb.SqlData[])">
            <summary>
            设置insert/update的字段
            </summary>
        </member>
        <member name="M:ThinkDb.ISqlCommand.Where(ThinkDb.SqlWhere[])">
            <summary>
            设定查询条件
            </summary>
        </member>
        <member name="M:ThinkDb.ISqlCommand.DeleteAll``1(``0[])">
            <summary>
            删除主键数组相关的记录集
            </summary>
        </member>
        <member name="M:ThinkDb.ISqlCommand.Delete(System.Object[])">
            <summary>
            根据主键删除数据
            </summary>
        </member>
        <member name="M:ThinkDb.ISqlCommand.Delete">
            <summary>
            删除符合条件的数据
            </summary>
        </member>
        <member name="M:ThinkDb.ISqlCommand.Save">
            <summary>
            保存数据
            </summary>
            <returns>如果失败返回-1;成功返回0;如果大于0表示自动增量的值</returns>
        </member>
        <member name="M:ThinkDb.ISqlCommand.Update">
            <summary>
            更新符合条件的数据
            </summary>
        </member>
        <member name="M:ThinkDb.SqlCommand.Table(System.String)">
            <summary>
            设置表名称
            </summary>
        </member>
        <member name="M:ThinkDb.SqlCommand.Data(ThinkDb.SqlData[])">
            <summary>
            设置添加/修改数据
            </summary>
            <param name="datas"><see cref="T:ThinkDb.SqlData"/>类的数组形式</param>
        </member>
        <member name="M:ThinkDb.SqlCommand.Where(ThinkDb.SqlWhere[])">
            <summary>
            设置查询条件
            </summary>
            <param name="conditions">查询类数组</param>
        </member>
        <member name="M:ThinkDb.SqlCommand.Save">
            <summary>
            保存数据
            </summary>
        </member>
        <member name="M:ThinkDb.SqlCommand.Update">
            <summary>
            更新数据
            </summary>
        </member>
        <member name="M:ThinkDb.SqlCommand.Delete">
            <summary>
            删除操作
            </summary>
        </member>
        <member name="M:ThinkDb.SqlCommand.Delete(System.Object[])">
            <summary>
            根据主键ID删除数据
            </summary>
        </member>
        <member name="M:ThinkDb.SqlCommand.DeleteAll``1(``0[])">
            <summary>
            删除符合主键id的记录
            </summary>
        </member>
        <member name="M:ThinkDb.SqlCommand.Reset">
            <summary>
            恢复各字段初始化状态
            </summary>
        </member>
        <member name="T:ThinkDb.ISqlQuery">
            <summary>
            表示数据查询的接口
            </summary>
        </member>
        <member name="M:ThinkDb.ISqlQuery.Table(System.String)">
            <summary>
            设置表名称
            </summary>
        </member>
        <member name="M:ThinkDb.ISqlQuery.Table(System.String,System.String)">
            <summary>
            设置表名称
            </summary>
        </member>
        <member name="M:ThinkDb.ISqlQuery.Distinct">
            <summary>
            消除重复项
            </summary>
        </member>
        <member name="M:ThinkDb.ISqlQuery.Field(ThinkDb.SqlField[])">
            <summary>
            设置查询的字段
            </summary>
        </member>
        <member name="M:ThinkDb.ISqlQuery.Join(ThinkDb.SqlJoin[])">
            <summary>
            设置连接查询
            </summary>
        </member>
        <member name="M:ThinkDb.ISqlQuery.Where(ThinkDb.SqlWhere[])">
            <summary>
            设定查询条件
            </summary>
        </member>
        <member name="M:ThinkDb.ISqlQuery.GroupBy">
            <summary>
            分组查询(前提是必须指定Fileds)
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkDb.ISqlQuery.Having(ThinkDb.SqlHaving[])">
            <summary>
            过滤
            </summary>
        </member>
        <member name="M:ThinkDb.ISqlQuery.OrderBy(ThinkDb.SqlOrder[])">
            <summary>
            排序
            </summary>
        </member>
        <member name="M:ThinkDb.ISqlQuery.Limit(System.Int32,System.Int32)">
            <summary>
            显示分页数据
            </summary>
            <param name="page">页码(从1开始)</param>
            <param name="rows">每页显示的行数</param>
        </member>
        <member name="M:ThinkDb.ISqlQuery.Find(System.Object[])">
            <summary>
            根据主键id获取记录
            </summary>
        </member>
        <member name="M:ThinkDb.ISqlQuery.Find">
            <summary>
            找到一条记录键与值的集合
            </summary>
        </member>
        <member name="M:ThinkDb.ISqlQuery.FindAll">
            <summary>
            找到所有记录集的集合
            </summary>
        </member>
        <member name="M:ThinkDb.ISqlQuery.FindAll(System.Int32@)">
            <summary>
            找到所有记录集的集合并输出记录总数
            </summary>
        </member>
        <member name="M:ThinkDb.ISqlQuery.FindAll(System.Object[])">
            <summary>
            查找主键数组相关的记录集
            </summary>
        </member>
        <member name="M:ThinkDb.SqlQuery.Join(ThinkDb.SqlJoin[])">
            <summary>
            连接多表
            </summary>
            <param name="joins"><see cref="T:ThinkDb.SqlJoin"/>类的数组</param>
            <returns>当前对象</returns>
        </member>
        <member name="M:ThinkDb.SqlQuery.Table(System.String)">
            <summary>
            设置表名称
            </summary>
            <param name="tableName">源表名称</param>
        </member>
        <member name="M:ThinkDb.SqlQuery.Table(System.String,System.String)">
            <summary>
            设置表名称
            </summary>
            <param name="tableName">源表名称</param>
            <param name="tableAlias">别名</param>
        </member>
        <member name="M:ThinkDb.SqlQuery.Distinct">
            <summary>
            过滤重复记录
            </summary>
        </member>
        <member name="M:ThinkDb.SqlQuery.Field(ThinkDb.SqlField[])">
            <summary>
            设置显示字段
            </summary>
            <param name="fields"><see cref="T:ThinkDb.SqlField"/>类的数组</param>
        </member>
        <member name="M:ThinkDb.SqlQuery.Where(ThinkDb.SqlWhere[])">
            <summary>
            设置查询条件
            </summary>
            <param name="conditions">查询类数组</param>
        </member>
        <member name="M:ThinkDb.SqlQuery.GroupBy">
            <summary>
            设定分组字段来自Fields
            </summary>
        </member>
        <member name="M:ThinkDb.SqlQuery.Having(ThinkDb.SqlHaving[])">
            <summary>
            设置合计函数过滤条件
            </summary>
            <param name="conditions">过滤条件数组</param>
        </member>
        <member name="M:ThinkDb.SqlQuery.OrderBy(ThinkDb.SqlOrder[])">
            <summary>
            排序
            </summary>
            <param name="orders">排序类数组</param>
        </member>
        <member name="M:ThinkDb.SqlQuery.Limit(System.Int32,System.Int32)">
            <summary>
            显示分页数据
            </summary>
            <param name="page">页码(从1开始)</param>
            <param name="rows">每页显示的行数</param>
        </member>
        <member name="M:ThinkDb.SqlQuery.Find">
            <summary>
            查询结果
            </summary>
        </member>
        <member name="M:ThinkDb.SqlQuery.Find(System.Object[])">
            <summary>
            查询结果
            </summary>
        </member>
        <member name="M:ThinkDb.SqlQuery.FindAll">
            <summary>
            查询结果集
            </summary>
        </member>
        <member name="M:ThinkDb.SqlQuery.FindAll(System.Object[])">
            <summary>
            查询结果集
            </summary>
        </member>
        <member name="M:ThinkDb.SqlQuery.FindAll(System.Int32@)">
            <summary>
            查询结果
            </summary>
            <param name="total">记录总数</param>
        </member>
        <member name="T:ThinkDb.AutoSequenceAttribute">
            <summary>
            指定自动增量的实体属性的类
            </summary>
        </member>
        <member name="T:ThinkDb.DbActiveType">
            <summary>
            与数据库的操作方式
            </summary>
        </member>
        <member name="F:ThinkDb.DbActiveType.NONE">
            <summary>
            不参与
            </summary>
        </member>
        <member name="F:ThinkDb.DbActiveType.INSERT">
            <summary>
            添加
            </summary>
        </member>
        <member name="F:ThinkDb.DbActiveType.UPDATE">
            <summary>
            更新
            </summary>
        </member>
        <member name="F:ThinkDb.DbActiveType.ALL">
            <summary>
            添加/更新
            </summary>
        </member>
        <member name="T:ThinkDb.FieldActiveAttribute">
            <summary>
            表示字段持久化类型的特性
            </summary>
        </member>
        <member name="M:ThinkDb.FieldActiveAttribute.#ctor(ThinkDb.DbActiveType)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="P:ThinkDb.FieldActiveAttribute.ActiveType">
            <summary>
            与数据库操作状态
            </summary>
        </member>
        <member name="T:ThinkDb.FieldIgnoreAttribute">
            <summary>
            表示忽略的字段
            </summary>
        </member>
        <member name="M:ThinkDb.FieldIgnoreAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:ThinkDb.FieldInsertAttribute">
            <summary>
            表示只用于Insert的字段
            </summary>
        </member>
        <member name="M:ThinkDb.FieldInsertAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:ThinkDb.FieldMappingAttribute">
            <summary>
            实体属性映射到表字段的类
            </summary>
        </member>
        <member name="M:ThinkDb.FieldMappingAttribute.#ctor(System.String)">
            <summary>
            使用字段名称来初始化 <see cref="T:ThinkDb.FieldMappingAttribute"/> 类的新实例。
            </summary>
            <param name="fieldName">字段名称</param>
        </member>
        <member name="P:ThinkDb.FieldMappingAttribute.FieldName">
            <summary>
            映射的字段名称
            </summary>
        </member>
        <member name="T:ThinkDb.FieldUpdateAttribute">
            <summary>
            表示只用于更新的字段
            </summary>
        </member>
        <member name="M:ThinkDb.FieldUpdateAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:ThinkDb.TableMappingAttribute">
            <summary>
            映射实体对应的数据表
            </summary>
        </member>
        <member name="M:ThinkDb.TableMappingAttribute.#ctor(System.String)">
            <summary>
            使用表名称来初始化 <see cref="T:ThinkDb.TableMappingAttribute"/> 类的新实例。
            </summary>
            <param name="tableName">表名称</param>
        </member>
        <member name="P:ThinkDb.TableMappingAttribute.TableName">
            <summary>
            映射的表名称
            </summary>
        </member>
        <member name="T:ThinkDb.SqlData">
            <summary>
            用于向数据库中添加/修改的数据类
            </summary>
        </member>
        <member name="M:ThinkDb.SqlData.#ctor(System.String,System.Int32)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkDb.SqlData.#ctor(System.String,System.Decimal)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkDb.SqlData.#ctor(System.String,System.DateTime)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkDb.SqlData.#ctor(System.String,System.String)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkDb.SqlData.#ctor(System.String,System.Object)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="P:ThinkDb.SqlData.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:ThinkDb.SqlData.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:ThinkDb.SqlField">
            <summary>
            查询字段
            </summary>
        </member>
        <member name="T:ThinkDb.SqlGroup">
            <summary>
            表示未包含在聚合函数的列
            </summary>
        </member>
        <member name="M:ThinkDb.SqlGroup.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ThinkDb.SqlGroup.#ctor(System.String)">
            <summary>
            Parameterized constructor.
            </summary>
            <param name="name">列名称</param>
        </member>
        <member name="P:ThinkDb.SqlGroup.FieldName">
            <summary>
            获取列名称
            </summary>
        </member>
        <member name="M:ThinkDb.SqlField.#ctor">
            <summary>
            constructor.
            </summary>
        </member>
        <member name="M:ThinkDb.SqlField.#ctor(System.String)">
            <summary>
            用字段名称构造实例
            </summary>
            <param name="name">字段名称</param>
        </member>
        <member name="M:ThinkDb.SqlField.#ctor(System.String,System.String)">
            <summary>
            用字段名称和别名构造实例
            </summary>
            <param name="name">字段名称</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:ThinkDb.SqlField.#ctor(ThinkDb.DbAggrefunc,System.String)">
            <summary>
            用合计函数类型和字段名称构造实例
            </summary>
            <param name="func">合计函数类型</param>
            <param name="name">字段名称</param>
        </member>
        <member name="M:ThinkDb.SqlField.#ctor(ThinkDb.DbAggrefunc,System.String,System.String)">
            <summary>
            用合计函数类型、字段名前缀和字段名称构造实例
            </summary>
            <param name="func">合计函数类型</param>
            <param name="name">字段名称</param>
            <param name="alias">别名</param>
        </member>
        <member name="P:ThinkDb.SqlField.Aggrefunc">
            <summary>
            合计函数
            </summary>
        </member>
        <member name="P:ThinkDb.SqlField.Alias">
            <summary>
            别名
            </summary>
        </member>
        <member name="T:ThinkDb.SqlHaving">
            <summary>
            T-SQL having
            </summary>
        </member>
        <member name="T:ThinkDb.SqlWhere">
            <summary>
            T-SQL where
            </summary>
        </member>
        <member name="M:ThinkDb.SqlWhere.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ThinkDb.SqlWhere.#ctor(System.String,System.Object)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkDb.SqlWhere.#ctor(System.String,ThinkDb.DbJudgeSymbol,System.Object)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkDb.SqlWhere.#ctor(ThinkDb.DbLogical,System.String,System.Object)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkDb.SqlWhere.#ctor(ThinkDb.DbLogical,System.String,ThinkDb.DbJudgeSymbol,System.Object)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="P:ThinkDb.SqlWhere.Aggrefunc">
            <summary>
            合计函数
            </summary>
        </member>
        <member name="P:ThinkDb.SqlWhere.Safety">
            <summary>
            安全链接
            </summary>
        </member>
        <member name="P:ThinkDb.SqlWhere.Logical">
            <summary>
            连接类型
            </summary>
        </member>
        <member name="P:ThinkDb.SqlWhere.Value">
            <summary>
            对应的值
            </summary>
        </member>
        <member name="P:ThinkDb.SqlWhere.Symbol">
            <summary>
            查询等式
            </summary>
        </member>
        <member name="M:ThinkDb.SqlHaving.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ThinkDb.SqlHaving.#ctor(ThinkDb.DbAggrefunc,System.String,System.Object)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkDb.SqlHaving.#ctor(ThinkDb.DbAggrefunc,System.String,ThinkDb.DbJudgeSymbol,System.Object)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkDb.SqlHaving.#ctor(ThinkDb.DbLogical,ThinkDb.DbAggrefunc,System.String,System.Object)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkDb.SqlHaving.#ctor(ThinkDb.DbLogical,ThinkDb.DbAggrefunc,System.String,ThinkDb.DbJudgeSymbol,System.Object)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="T:ThinkDb.SqlJoin">
            <summary>
            T-SQL join
            </summary>
        </member>
        <member name="M:ThinkDb.SqlJoin.#ctor(System.String)">
            <summary>
            Parameterized constructor.
            </summary>
            <param name="tableName">连接表名称</param>
        </member>
        <member name="M:ThinkDb.SqlJoin.#ctor(System.String,System.String)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkDb.SqlJoin.#ctor(ThinkDb.DbJoinWay,System.String)">
            <summary>
            Parameterized constructor.
            </summary>
            <param name="joinType">连接方式</param>
            <param name="tableName">连接表名称</param>
        </member>
        <member name="M:ThinkDb.SqlJoin.#ctor(ThinkDb.DbJoinWay,System.String,System.String)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkDb.SqlJoin.On(System.String,System.String)">
            <summary>
            设置连接查询(主外键)
            </summary>
            <param name="sameField">相同字段名</param>
            <param name="joinTable">连接表名</param>
        </member>
        <member name="M:ThinkDb.SqlJoin.On(System.String,System.String,System.String)">
            <summary>
            设置连接查询(主外键)
            </summary>
            <param name="field">当前字段名</param>
            <param name="joinTable">连接表名</param>
            <param name="joinField">连接表字段名</param>
        </member>
        <member name="M:ThinkDb.SqlJoin.On(ThinkDb.SqlWhere[])">
            <summary>
            连接查询条件
            </summary>
            <param name="conditions">查询条件</param>
        </member>
        <member name="M:ThinkDb.SqlJoin.On(System.Collections.Generic.IEnumerable{ThinkDb.SqlWhere})">
            <summary>
            连接查询条件
            </summary>
            <param name="conditions"></param>
        </member>
        <member name="P:ThinkDb.SqlJoin.JoinType">
            <summary>
            连接方式
            </summary>
        </member>
        <member name="P:ThinkDb.SqlJoin.Table">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:ThinkDb.SqlJoin.TableAlias">
            <summary>
            表别名
            </summary>
        </member>
        <member name="P:ThinkDb.SqlJoin.OnConditions">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="T:ThinkDb.SqlOrder">
            <summary>
            用于排序的列
            </summary>
        </member>
        <member name="M:ThinkDb.SqlOrder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ThinkDb.SqlOrder.#ctor(System.String,ThinkDb.DbOrderType)">
            <summary>
            使用字段名称和排序方式创建新实例。
            </summary>
            <param name="name">字段名称</param>
            <param name="orderType">排序方式枚举</param>
        </member>
        <member name="P:ThinkDb.SqlOrder.OrderType">
            <summary>
            排序规则
            </summary>
        </member>
        <member name="T:ThinkDb.DbLogical">
            <summary>
            查询条件连接类型
            </summary>
        </member>
        <member name="F:ThinkDb.DbLogical.And">
            <summary>
            And
            </summary>
        </member>
        <member name="F:ThinkDb.DbLogical.Or">
            <summary>
            Or
            </summary>
        </member>
    </members>
</doc>
